---
name: Check Pull Request

on: [pull_request]  # yamllint disable-line rule:truthy

env:
  NODE_VERSION: '16.13.0'

jobs:
  yaml_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Yaml lint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint

  markdown_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Markdonw lint
        uses: docker://markdownlint/markdownlint:latest
        with:
          args: "--warnings ."

  docker_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Docker lint
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile
          ignore: DL4006 SC2006

  eslint_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@yaperos'
      - name: Eslint lint
        id: eslint-test
        run: |
          npm install
          npm run lint
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT }}

  unit_test:
    runs-on: ubuntu-latest
    needs: ['yaml_lint', 'markdown_lint', 'docker_lint', 'eslint_lint']
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@yaperos'
      - name: Unit Test
        id: unit-test
        run: |
          npm install
          npm run test:unit
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/userdb?schema=public"
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT }}

  e2e_test:
    runs-on: ubuntu-latest
    needs: ['yaml_lint', 'markdown_lint', 'docker_lint', 'eslint_lint', 'build']
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@yaperos'
      - name: e2e Test
        id: e2e-test
        run: |
          npm install
          npx prisma migrate dev --name init
          npm run test:e2e
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/userdb?schema=public"
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT }}

  security_test:
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    needs: ['yaml_lint', 'markdown_lint', 'docker_lint', 'eslint_lint']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@yaperos'
      - name: Security Test
        id: security-test
        run: |
          npm install
          npm run test:sec
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT }}

  build:
    environment:
      name: qa
    runs-on: ubuntu-latest
    # needs: ['unit_test', 'security_test'] #security_test disable for now
    needs: ['unit_test']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Get hash commit
        id: hash_commit
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Conteiner Registry Login
        uses: azure/docker-login@v1
        with:
          login-server: acryape3eastus${{ secrets.ENVIRONMENT }}.azurecr.io
          username: ${{ secrets.AZURE_ACR_USERNAME_QA }}
          password: ${{ secrets.AZURE_ACR_PASSWORD_QA }}
      - name: Container Build and Push (DryRun)
        uses: docker/build-push-action@v2.7.0
        with:
          tags: "acryape3eastus${{ secrets.ENVIRONMENT }}.azurecr.io/${{ github.event.repository.name }}-${{ secrets.ENVIRONMENT }}:${{ steps.hash_commit.outputs.sha_short }}"  # yamllint disable-line rule:line-length
          push: false
          build-args: |
            NODE_AUTH_TOKEN=${{ secrets.GH_PAT }}
